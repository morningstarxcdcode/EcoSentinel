name: EcoSentinel CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npx prettier --check .

      - name: TypeScript type check
        run: npm run type-check

      - name: Security audit
        run: npm audit --audit-level=high

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: |
          npm run build
          npm start &
          sleep 10
          npm run test:e2e

  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ecosentinel_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ecosentinel_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key
          NODE_ENV: test
        run: npm run test:backend

      - name: Test API endpoints
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ecosentinel_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key
        run: |
          npm run api &
          sleep 5
          curl -f http://localhost:8000/health || exit 1

  # AI Service Tests
  ai-tests:
    name: AI Service Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          pip install -r ai/requirements.txt
          pip install pytest pytest-cov

      - name: Run AI service tests
        run: |
          cd ai
          python -m pytest tests/ --cov=. --cov-report=xml

      - name: Upload AI coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./ai/coverage.xml
          flags: ai-service
          name: ai-service-coverage

  # Docker Build and Security Scan
  docker-build:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [code-quality, frontend-tests, backend-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ecosentinel:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ecosentinel:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          npm start &
          sleep 10
          lhci autorun

      - name: Load test API
        run: |
          npm run api &
          sleep 5
          npx artillery quick --count 100 --num 10 http://localhost:8000/health

  # Deployment to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, performance-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Deploy API to Google Cloud Run (Staging)
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ecosentinel-api-staging
          image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/ecosentinel-api:${{ github.sha }}
          region: us-central1
          credentials: ${{ secrets.GCP_SA_KEY }}

  # Deployment to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, performance-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Deploy API to Google Cloud Run (Production)
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ecosentinel-api
          image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/ecosentinel-api:${{ github.sha }}
          region: us-central1
          credentials: ${{ secrets.GCP_SA_KEY }}

      - name: Run post-deployment tests
        run: |
          sleep 30
          curl -f https://ecosentinel.vercel.app/api/health || exit 1

      - name: Notify Slack on success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'üöÄ EcoSentinel deployed successfully to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Monitoring and Alerts
  post-deployment:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Setup monitoring alerts
        run: |
          echo "Setting up Grafana alerts and Prometheus monitoring..."
          # In a real scenario, this would configure monitoring dashboards

      - name: Performance baseline check
        run: |
          echo "Running performance baseline checks..."
          # Check response times, error rates, etc.

      - name: Security scan post-deployment
        run: |
          echo "Running security scans on live environment..."
          # OWASP ZAP or similar security scanning

# Workflow notifications
notifications:
  name: Notifications
  runs-on: ubuntu-latest
  needs: [deploy-production]
  if: always()
  steps:
    - name: Notify team on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '‚ùå EcoSentinel deployment failed! Check the logs.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
